"""новые таблицы

Revision ID: 3362da42650c
Revises:
Create Date: 2023-08-29 18:54:06.596477

"""
from typing import Sequence, Union

import sqlalchemy as sa

from alembic import op

# revision identifiers, used by Alembic.
revision: str = '3362da42650c'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        'like',
        sa.Column('id', sa.UUID(), nullable=False),
        sa.Column('user_id', sa.UUID(), nullable=True),
        sa.Column('cover', sa.String(), nullable=False),
        sa.ForeignKeyConstraint(
            ['user_id'],
            ['user.id'],
        ),
        sa.PrimaryKeyConstraint('id'),
        sa.UniqueConstraint('user_id'),
    )
    op.create_table(
        'list',
        sa.Column('id', sa.UUID(), nullable=False),
        sa.Column('owner_id', sa.UUID(), nullable=True),
        sa.Column('name', sa.String(), nullable=False),
        sa.Column('cover', sa.String(), nullable=True),
        sa.Column('description', sa.String(), nullable=True),
        sa.Column('is_private', sa.Boolean(), nullable=True),
        sa.Column('created_at', sa.DateTime(), nullable=True),
        sa.ForeignKeyConstraint(
            ['owner_id'],
            ['user.id'],
        ),
        sa.PrimaryKeyConstraint('id'),
    )
    op.create_table(
        'passed',
        sa.Column('id', sa.UUID(), nullable=False),
        sa.Column('user_id', sa.UUID(), nullable=True),
        sa.Column('cover', sa.String(), nullable=False),
        sa.ForeignKeyConstraint(
            ['user_id'],
            ['user.id'],
        ),
        sa.PrimaryKeyConstraint('id'),
        sa.UniqueConstraint('user_id'),
    )
    op.create_table(
        'like_game',
        sa.Column('list_id', sa.UUID(), nullable=True),
        sa.Column('game_id', sa.UUID(), nullable=True),
        sa.Column('created_at', sa.DateTime(), nullable=True),
        sa.ForeignKeyConstraint(
            ['game_id'],
            ['game.id'],
        ),
        sa.ForeignKeyConstraint(
            ['list_id'],
            ['like.id'],
        ),
    )
    op.create_table(
        'list_game',
        sa.Column('list_id', sa.UUID(), nullable=False),
        sa.Column('game_id', sa.UUID(), nullable=True),
        sa.Column('created_at', sa.DateTime(), nullable=True),
        sa.ForeignKeyConstraint(
            ['game_id'],
            ['game.id'],
        ),
        sa.ForeignKeyConstraint(
            ['list_id'],
            ['list.id'],
        ),
        sa.PrimaryKeyConstraint('list_id'),
    )
    op.create_table(
        'passed_game',
        sa.Column('list_id', sa.UUID(), nullable=True),
        sa.Column('game_id', sa.UUID(), nullable=True),
        sa.Column('created_at', sa.DateTime(), nullable=True),
        sa.ForeignKeyConstraint(
            ['game_id'],
            ['game.id'],
        ),
        sa.ForeignKeyConstraint(
            ['list_id'],
            ['passed.id'],
        ),
    )
    op.create_foreign_key(None, 'list_user', 'list', ['list_id'], ['id'])
    op.drop_column('wantplay_game', 'id')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('wantplay_game', sa.Column('id', sa.UUID(), autoincrement=False, nullable=False))
    op.drop_constraint(None, 'list_user', type_='foreignkey')
    op.drop_table('passed_game')
    op.drop_table('list_game')
    op.drop_table('like_game')
    op.drop_table('passed')
    op.drop_table('list')
    op.drop_table('like')
    # ### end Alembic commands ###
